/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Fri Oct 21 14:57:31 2016. */

#ifndef PB_SEMS_PB_H_INCLUDED
#define PB_SEMS_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _sems_SensorDataList {
    pb_callback_t list;
/* @@protoc_insertion_point(struct:sems_SensorDataList) */
} sems_SensorDataList;

typedef PB_BYTES_ARRAY_T(128) sems_ActionData_data_t;
typedef struct _sems_ActionData {
    uint32_t id;
    uint32_t cmd;
    bool has_data;
    sems_ActionData_data_t data;
    bool has_state;
    uint32_t state;
/* @@protoc_insertion_point(struct:sems_ActionData) */
} sems_ActionData;

typedef PB_BYTES_ARRAY_T(128) sems_SensorData_data_t;
typedef struct _sems_SensorData {
    uint32_t type;
    sems_SensorData_data_t data;
/* @@protoc_insertion_point(struct:sems_SensorData) */
} sems_SensorData;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sems_SensorData_init_default             {0, {0, {0}}}
#define sems_SensorDataList_init_default         {{{NULL}, NULL}}
#define sems_ActionData_init_default             {0, 0, false, {0, {0}}, false, 0}
#define sems_SensorData_init_zero                {0, {0, {0}}}
#define sems_SensorDataList_init_zero            {{{NULL}, NULL}}
#define sems_ActionData_init_zero                {0, 0, false, {0, {0}}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define sems_SensorDataList_list_tag             1
#define sems_ActionData_id_tag                   1
#define sems_ActionData_cmd_tag                  2
#define sems_ActionData_data_tag                 3
#define sems_ActionData_state_tag                4
#define sems_SensorData_type_tag                 1
#define sems_SensorData_data_tag                 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sems_SensorData_fields[3];
extern const pb_field_t sems_SensorDataList_fields[2];
extern const pb_field_t sems_ActionData_fields[5];

/* Maximum encoded size of messages (where known) */
#define sems_SensorData_size                     72
/* sems_SensorDataList_size depends on runtime parameters */
#define sems_ActionData_size                     84

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SEMS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
